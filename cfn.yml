AWSTemplateFormatVersion: "2010-09-09"
Description: Serverless private URL shortener based on Amazon S3, AWS Lambda, Amazon CloudFront and API Gateway.

Parameters:
  S3BucketName:
    Type: String
    Description: Enter the Amazon S3 bucket to use for the URL shortener, or leave empty to create a new bucket with automatically generated name. The S3 bucket is kept after you delete this template.
  URLExpiration:
    Type: Number
    Default: 7
    Description: Expiration in days for short URLs. After this delay, short URLs will be automatically deleted.

Conditions:
  CreateNewBucket: !Equals ["", !Ref S3BucketName]

Outputs:
  S3BucketName:
    Description: "Amazon S3 bucket name holding short URLs redirect objects. Note: the bucket will not be deleted when you delete this template."
    Value: !Ref S3BucketForURLs
  ConnectURL:
    Description: URL to connect to the admin page of the URL Shortener. Do not use until you update the template with the API Gateway endpoint you need to manually create.
    Value: !Sub "https://${CloudFrontDistrib.DomainName}/admin/"

Resources:

  ######################################################################
  #
  # Amazon S3 bucket to store the HTML form and the redirection objects
  #   the 'u' folder is used for redirect objects and is public
  #
  ######################################################################
  S3BucketForURLs:
    Type: "AWS::S3::Bucket"
    DeletionPolicy: Delete
    Properties:
      BucketName: !If [ "CreateNewBucket", !Ref "AWS::NoValue", !Ref S3BucketName ]
      BucketEncryption: 
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      WebsiteConfiguration:
        IndexDocument: "index.html"
      LifecycleConfiguration:
        Rules:
          -
            Id: DisposeShortUrls
            ExpirationInDays: !Ref URLExpiration
            Prefix: "u/"
            Status: Enabled

  ######################################################################
  #
  # Lambda function for the URL Shortener
  #
  ######################################################################
  LambdaShortener:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: index.handler
      MemorySize: 384
      Role: !GetAtt LambdaExecRole.Arn
      Runtime: python3.6
      Timeout: 10
      Environment:
        Variables:
          S3_BUCKET: !Ref S3BucketForURLs
      Code:
        ZipFile: |
          import boto3
          import os
          import random
          import string
          import botocore
          from botocore.client import Config

          AWS_REGION = os.environ['AWS_REGION']

          DEBUG = True

          # generate a random string of n characters, lowercase and numbers
          def generate_random(n):
            return ''.join(random.SystemRandom().choice(string.ascii_lowercase + string.digits) for _ in range(n))

          # checks whether an object already exists in the Amazon S3 bucket
          # we do a head_object, if it throws a 404 error then the object does not exist
          def exists_s3_key(s3_client, bucket, key):
            try:
              resp = s3_client.head_object(Bucket=bucket, Key=key)
              return True
            except botocore.exceptions.ClientError as e:
              # if ListBucket access is granted, then missing file returns 404
              if (e.response['Error']['Code'] == "404"): return False
              # if ListBucket access is not granted, then missing file returns 403 (which is the case here)
              if (e.response['Error']['Code'] == "403"): return False
              print(e.response)
              raise e     # otherwise re-raise the exception

          def handler(event, context):
            print(event)
            BUCKET_NAME = os.environ['S3_BUCKET']   # from env variable

            native_url = event.get("url_long")
            cdn_prefix = event.get("cdn_prefix")

            ### Generate a short id for the redirect
            # check if short_key object already exists - collision could occur
            s3 = boto3.client('s3', config=Config(signature_version='s3v4'))

            while (True):
              short_id = generate_random(7)
              short_key = "u/" + short_id
              if not(exists_s3_key(s3, BUCKET_NAME, short_key)):
                break
              else:
                print("We got a short_key collision: " + short_key + ". Retrying.")

            print("We got a valid short_key: " + short_key)

            ### Third step: create the redirection object in the S3 bucket
            resp = s3.put_object(Bucket=BUCKET_NAME,
                                 Key=short_key,
                                 Body=b"",
                                 WebsiteRedirectLocation=native_url,
                                 ContentType="text/plain")

            public_short_url = "https://" + cdn_prefix + "/" + short_id;

            return { "url_short": public_short_url, "url_long": native_url }
  ######################################################################
  #
  # Lambda function for the URL Redirection
  #
  ######################################################################
  LambdaRedirector:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: index.handler
      MemorySize: 384
      Role: !GetAtt LambdaExecRole.Arn
      Runtime: python3.6
      Timeout: 5
      Environment:
        Variables:
          S3_BUCKET: !Ref S3BucketForURLs
      Code:
        ZipFile: |
          import os
          import boto3
          from botocore.client import Config

          S3_BUCKET = os.environ['S3_BUCKET']

          def handler(event, context):
            print(event)
            short_url = "u/" + event.get("Key")
            
            s3 = boto3.client('s3', config=Config(signature_version='s3v4'))
            resp = s3.head_object(Bucket=S3_BUCKET, Key=short_url)
            
            print(resp)
            redirect_url = resp.get('WebsiteRedirectLocation')
            if redirect_url:
              print("Redirect: " + redirect_url)
              return { "Redirect": redirect_url }
            else:
              return { "Error": "Unable to load redirect url for object: s3://" + S3_BUCKET + "/" + short_url }

  LambdaExecRole:
    Type: "AWS::IAM::Role"
    Properties:
      ManagedPolicyArns:
      - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
        -
          PolicyName: LambdaExecRoleUrlShortener
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: Allow
                Action: [ "s3:GetObject", "s3:PutObject" ]
                Resource: !Sub "arn:aws:s3:::${S3BucketForURLs}/u/*"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Sid: ""
            Effect: Allow
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"

  ######################################################################
  #
  # CloudFront distribution for the global project
  #
  ######################################################################
  CloudFrontDistrib:
    Type: "AWS::CloudFront::Distribution"
    Properties:
      DistributionConfig:
        Origins:
          -
            DomainName: !Sub "${URLShortenerAPI}.execute-api.${AWS::Region}.amazonaws.com"
            Id: OriginAPIGW
            OriginPath: "/prod"
            CustomOriginConfig:
              OriginProtocolPolicy: "match-viewer"
              OriginSSLProtocols: [ "TLSv1.2" ]
        Comment: CloudFront distribution used as a front end to the server-less URL Shortener
        Enabled: true
        DefaultCacheBehavior:
          ForwardedValues:
            QueryString: false
          TargetOriginId: "OriginAPIGW"
          ViewerProtocolPolicy: "redirect-to-https"
        CacheBehaviors:
          -
            PathPattern: "/admin_*"
            TargetOriginId: "OriginAPIGW"
            AllowedMethods: [ DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT ]
            ForwardedValues:
              Headers: [ Authorization ]
              QueryString: false
            ViewerProtocolPolicy: "https-only"
          -
            PathPattern: "/"
            TargetOriginId: "OriginAPIGW"
            AllowedMethods: [ HEAD, GET ]
            DefaultTTL: 0
            MaxTTL: 0
            ForwardedValues:
              Headers: [ Authorization ]
              QueryString: false
            ViewerProtocolPolicy: "redirect-to-https"

  # Invoke permission for Lambda
  LambdaShortenerInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt LambdaShortener.Arn
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${URLShortenerAPI}/*/POST/admin_shrink_url"
  LambdaRedirectorInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt LambdaRedirector.Arn
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${URLShortenerAPI}/*/GET/*"
  
  ######################################################################
  #
  # API Gateway definition for the Lambda functions
  #
  ######################################################################
  URLShortenerAPI:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Description: Rest API for URL Shortener
      Name: !Ref LambdaShortener
      FailOnWarnings: true
      Body:
        swagger: "2.0"
        info:
          title: "URLShortener"
        schemes: [ https ]
        paths:
          /admin:
            get:
              consumes: [ "application/json" ]
              produces: [ "application/json" ]
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Content-Type:
                      type: "string"
              x-amazon-apigateway-integration:
                passthroughBehavior: "when_no_match"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                type: "mock"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Content-Type: "'text/html'"
                    responseTemplates:
                      application/json:  |
                        <!DOCTYPE html>
                        <html lang="en">
                        <head>
                            <meta charset="utf-8">
                            <title>Private URL shortener</title>
                            <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.0.3/css/bootstrap.min.css">
                            <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.4/jquery.min.js"></script>
                            <script type="text/javascript">

                            $(document).ready(function() {

                                // used only to allow local serving of files
                                $.ajaxSetup({
                                    beforeSend: function(xhr) {
                                        if (xhr.overrideMimeType) {
                                            xhr.overrideMimeType("application/json");
                                        }
                                    }
                                });

                                $('#url_input').focus();    // set initial focus

                                $('form#submit').submit(function(event) {
                                    $('#url_input_submit').prop('disabled', true);

                                    // process the form
                                    $.ajax({
                                        type        : 'POST',
                                        url         : '/admin_shrink_url',
                                        data        : JSON.stringify({ 'url_long' : $('#url_input').val(), 'cdn_prefix': window.location.hostname }),
                                        contentType : 'application/json; charset=utf-8',
                                        dataType    : 'json',
                                        encode      : true
                                    })
                                    .done(function(data,textStatus, jqXHR) {
                                        $('#url_input_submit').prop('disabled', false);
                                        if (data.error) {
                                            $('#url-group').addClass('has-error'); // add the error class to show red input
                                            $('#url-error').show().text(data.error); // add the actual error message under our input
                                        } else {
                                            $('form#submit').hide();        // hide initial submit form
                                            $('form#result').show();        // and show the one used to display the results
                                            $('#url_long').text(data.url_long);
                                            $('#url_short').val(data.url_short).focus().select();
                                        }
                                    })
                                    .fail(function(_, _, errorThrown) {
                                        $('#url_input_submit').prop('disabled', false);
                                        $('#url-group').addClass('has-error'); // add the error class to show red input
                                        $('#url-error').show().text("Server error: "+errorThrown); // add the actual error message under our input
                                    });

                                    // stop the form from submitting the normal way and refreshing the page
                                    event.preventDefault();
                                });
                            
                                $('form#result').submit(function(event) {
                                    location.reload();
                                });

                            });
                            </script>
                        </head>
                        <body>
                        <div class="col-sm-8 col-sm-offset-1">

                            <h1>Private URL shortener</h1>
                            <br/>
                            <form id="submit">
                                <div id="url-group" class="form-group">
                                    <input type="url" required class="form-control" name="url" placeholder="Paste here the long URL here" id="url_input">
                                    <div class="help-block" style="display: none" id="url-error"></div>
                                </div>
                                <button type="submit" class="btn btn-success" id="url_input_submit">Shorten</button>

                            </form>
                            <form id="result" style="display: none">
                                <div class="alert alert-success">Successfully shortened: <br/><span id="url_long"></span></div>
                                <div class="form-group">
                                    <label for="name">You can now copy/paste the short URL</label>
                                    <input type="text" class="form-control" name="url" readonly="readonly" id="url_short">
                                </div><button type="submit" class="btn btn-success" id="page_reload">New URL</button><div>
                                </div>
                            </form>

                        </div>
                        </body>
                        </html>

          /admin_shrink_url:
            post:
              produces: [ "application/json" ]
              responses:
                "200":
                  description: "200 response"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaShortener.Arn}/invocations"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws"
          /{key}:
            get:
              consumes: [ "application/json" ]
              parameters:
              - name: "key"
                in: "path"
                required: true
                type: "string"
              responses:
                "302":
                  description: "302 response"
                  headers:
                    Location:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "302"
                    responseParameters:
                      method.response.header.Location: "integration.response.body.Redirect"
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaRedirector.Arn}/invocations"
                requestTemplates:
                  application/json: "{ \"Key\": \"$input.params('key')\" }"
                passthroughBehavior: "never"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws"

  URLShortenerAPIDeployment:
    Type: "AWS::ApiGateway::Deployment"
    Properties:
      RestApiId: !Ref URLShortenerAPI
  URLShortenerAPIStage:
    Type: "AWS::ApiGateway::Stage"
    Properties:
      StageName: "prod"
      Description: "Prod stage"
      RestApiId: !Ref URLShortenerAPI
      DeploymentId: !Ref URLShortenerAPIDeployment
